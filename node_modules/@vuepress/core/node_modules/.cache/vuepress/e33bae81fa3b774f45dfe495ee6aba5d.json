{"remainingRequest":"/Users/inessa/Documents/GitHub/user-docs-cloudlinux/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/inessa/Documents/GitHub/user-docs-cloudlinux/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/inessa/Documents/GitHub/user-docs-cloudlinux/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/inessa/Documents/GitHub/user-docs-cloudlinux/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/inessa/Documents/GitHub/user-docs-cloudlinux/docs/wpos-plugin/README.md?vue&type=template&id=792376ed&","dependencies":[{"path":"/Users/inessa/Documents/GitHub/user-docs-cloudlinux/docs/wpos-plugin/README.md","mtime":1634653751837},{"path":"/Users/inessa/Documents/GitHub/user-docs-cloudlinux/node_modules/cache-loader/dist/cjs.js","mtime":1574933633360},{"path":"/Users/inessa/Documents/GitHub/user-docs-cloudlinux/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1588951746079},{"path":"/Users/inessa/Documents/GitHub/user-docs-cloudlinux/node_modules/cache-loader/dist/cjs.js","mtime":1574933633360},{"path":"/Users/inessa/Documents/GitHub/user-docs-cloudlinux/node_modules/vue-loader/lib/index.js","mtime":1588951746079},{"path":"/Users/inessa/Documents/GitHub/user-docs-cloudlinux/node_modules/@vuepress/markdown-loader/index.js","mtime":1588951745736}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}