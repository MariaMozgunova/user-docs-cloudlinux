{"remainingRequest":"/Users/inessa/Documents/GitHub/user-docs-cloudlinux/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/inessa/Documents/GitHub/user-docs-cloudlinux/node_modules/vuepress-theme-cloudlinux/NotFound.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/inessa/Documents/GitHub/user-docs-cloudlinux/node_modules/vuepress-theme-cloudlinux/NotFound.vue","mtime":1608617753000},{"path":"/Users/inessa/Documents/GitHub/user-docs-cloudlinux/node_modules/cache-loader/dist/cjs.js","mtime":1574933633360},{"path":"/Users/inessa/Documents/GitHub/user-docs-cloudlinux/node_modules/babel-loader/lib/index.js","mtime":1588951745892},{"path":"/Users/inessa/Documents/GitHub/user-docs-cloudlinux/node_modules/cache-loader/dist/cjs.js","mtime":1574933633360},{"path":"/Users/inessa/Documents/GitHub/user-docs-cloudlinux/node_modules/vue-loader/lib/index.js","mtime":1588951746079}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmNvbnN0IG1zZ3MgPSBbCiAgYFRoZXJlJ3Mgbm90aGluZyBoZXJlLmAsCiAgYEhvdyBkaWQgd2UgZ2V0IGhlcmU/YCwKICBgVGhhdCdzIGEgRm91ci1PaC1Gb3VyLmAsCiAgYExvb2tzIGxpa2Ugd2UndmUgZ290IHNvbWUgYnJva2VuIGxpbmtzLmAKXTsKCmltcG9ydCBSZWRpcmVjdE1peGluIGZyb20gJy4vbWl4aW5zL1JlZGlyZWN0TWl4aW4nOwoKZXhwb3J0IGRlZmF1bHQgewogIG1peGluczogW1JlZGlyZWN0TWl4aW5dLAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBzaG93Tm90Rm91bmQ6IGZhbHNlCiAgICB9OwogIH0sCiAgbW91bnRlZCgpIHsKICAgIHRoaXMuc2hvd05vdEZvdW5kID0gIXRoaXMuY2hlY2tSZWRpcmVjdCgpOwogIH0sCiAgbWV0aG9kczogewogICAgZ2V0TXNnKCkgewogICAgICByZXR1cm4gbXNnc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBtc2dzLmxlbmd0aCldOwogICAgfQogIH0KfTsK"},{"version":3,"sources":["NotFound.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"NotFound.vue","sourceRoot":"node_modules/vuepress-theme-cloudlinux","sourcesContent":["<template>\n  <div class=\"theme-container\" v-if=\"showNotFound\">\n    <div class=\"content\">\n      <h1>404</h1>\n      <blockquote>{{ getMsg() }}</blockquote>\n      <router-link to=\"/\">Take me home.</router-link>\n    </div>\n  </div>\n</template>\n\n<script>\nconst msgs = [\n  `There's nothing here.`,\n  `How did we get here?`,\n  `That's a Four-Oh-Four.`,\n  `Looks like we've got some broken links.`\n];\n\nimport RedirectMixin from './mixins/RedirectMixin';\n\nexport default {\n  mixins: [RedirectMixin],\n  data() {\n    return {\n      showNotFound: false\n    };\n  },\n  mounted() {\n    this.showNotFound = !this.checkRedirect();\n  },\n  methods: {\n    getMsg() {\n      return msgs[Math.floor(Math.random() * msgs.length)];\n    }\n  }\n};\n</script>\n"]}]}